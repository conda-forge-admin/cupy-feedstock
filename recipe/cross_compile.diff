diff --git a/install/cupy_builder/cupy_setup_build.py b/install/cupy_builder/cupy_setup_build.py
index 8023e46ad..bb407e8eb 100644
--- a/install/cupy_builder/cupy_setup_build.py
+++ b/install/cupy_builder/cupy_setup_build.py
@@ -294,16 +294,34 @@ def make_extensions(ctx: Context, compiler, use_cython):
         # deprecated since ROCm 4.2.0
         settings['define_macros'].append(('__HIP_PLATFORM_HCC__', '1'))
 
-    available_modules = []
-    if no_cuda:
-        available_modules = [m['name'] for m in MODULES]
-    else:
-        available_modules, settings = preconfigure_modules(
-            ctx, MODULES, compiler, settings)
-        required_modules = get_required_modules(MODULES)
-        if not (set(required_modules) <= set(available_modules)):
-            raise Exception('Your CUDA environment is invalid. '
-                            'Please check above error log.')
+    try:
+        host_compiler = compiler
+        os.symlink(f'{os.environ["BUILD_PREFIX"]}/x86_64-conda-linux-gnu/bin/x86_64-conda-linux-gnu-ld',
+                   f'{os.environ["BUILD_PREFIX"]}/bin/ld')
+        if os.environ.get('CONDA_BUILD_CROSS_COMPILATION'):
+            # If cross-compiling, we need build_and_run() & build_shlib() to use the compiler
+            # on the build platform to generate stub files that are executable in the build
+            # environment, not the target environment.
+            compiler = ccompiler.new_compiler()
+            compiler.compiler = [os.environ['CC_FOR_BUILD'],]
+            compiler.compiler_cxx = [os.environ['CXX_FOR_BUILD'],]
+            compiler.compiler_so = [os.environ['CC_FOR_BUILD'],]
+            compiler.linker_exe = [os.environ['CC_FOR_BUILD'], f'-B{os.environ["BUILD_PREFIX"]}/bin']
+            compiler.linker_so = [os.environ['CC_FOR_BUILD'], f'-B{os.environ["BUILD_PREFIX"]}/bin', '-shared']
+
+        available_modules = []
+        if no_cuda:
+            available_modules = [m['name'] for m in MODULES]
+        else:
+            available_modules, settings = preconfigure_modules(
+                ctx, MODULES, compiler, settings)
+            required_modules = get_required_modules(MODULES)
+            if not (set(required_modules) <= set(available_modules)):
+                raise Exception('Your CUDA environment is invalid. '
+                                'Please check above error log.')
+    finally:
+        compiler = host_compiler
+        os.remove(f'{os.environ["BUILD_PREFIX"]}/bin/ld')
 
     ret = []
     for module in MODULES:
diff --git a/install/cupy_builder/install_build.py b/install/cupy_builder/install_build.py
index d0317e324..b0a65eb24 100644
--- a/install/cupy_builder/install_build.py
+++ b/install/cupy_builder/install_build.py
@@ -1,6 +1,7 @@
 # mypy: ignore-errors
 
 import contextlib
+from distutils import log
 import os
 import re
 import shlex
@@ -692,6 +693,16 @@ def get_cusparselt_version(formatted=False):
 def build_shlib(compiler, source, libraries=(),
                 include_dirs=(), library_dirs=(), define_macros=None,
                 extra_compile_args=()):
+    if os.environ.get('CONDA_BUILD_CROSS_COMPILATION'):
+        # If we're cross compiling, we need to generate stub files that are
+        # executable in the build environment, not the target environment.
+        # This assumes, however, that the build/host environments see the same
+        # CUDA Toolkit.
+        extra_compile_args = list(extra_compile_args) + ['-march=native',]
+        include_dirs = list(include_dirs) + [f'{os.environ["BUILD_PREFIX"]}/include', '/usr/local/cuda/include']
+        library_dirs = list(library_dirs) + [f'{os.environ["BUILD_PREFIX"]}/lib', '/usr/local/cuda/lib64/stubs']
+        log.set_verbosity(1)
+
     with _tempdir() as temp_dir:
         fname = os.path.join(temp_dir, 'a.cpp')
         with open(fname, 'w') as f:
@@ -717,6 +728,16 @@ def build_shlib(compiler, source, libraries=(),
 def build_and_run(compiler, source, libraries=(),
                   include_dirs=(), library_dirs=(), define_macros=None,
                   extra_compile_args=()):
+    if os.environ.get('CONDA_BUILD_CROSS_COMPILATION'):
+        # If we're cross compiling, we need to generate stub files that are
+        # executable in the build environment, not the target environment.
+        # This assumes, however, that the build/host environments see the same
+        # CUDA Toolkit.
+        extra_compile_args = list(extra_compile_args) + ['-march=native',]
+        include_dirs = list(include_dirs) + [f'{os.environ["BUILD_PREFIX"]}/include', '/usr/local/cuda/include']
+        library_dirs = list(library_dirs) + [f'{os.environ["BUILD_PREFIX"]}/lib', '/usr/local/cuda/lib64/stubs']
+        log.set_verbosity(1)
+
     with _tempdir() as temp_dir:
         fname = os.path.join(temp_dir, 'a.cpp')
         with open(fname, 'w') as f:
