diff --git a/install/cupy_builder/cupy_setup_build.py b/install/cupy_builder/cupy_setup_build.py
index 8023e46ad..b7db924cb 100644
--- a/install/cupy_builder/cupy_setup_build.py
+++ b/install/cupy_builder/cupy_setup_build.py
@@ -3,8 +3,10 @@
 import copy
 from distutils import ccompiler
 from distutils import sysconfig
+import logging
 import os
 import shutil
+import subprocess
 import sys
 
 import setuptools
@@ -294,16 +296,39 @@ def make_extensions(ctx: Context, compiler, use_cython):
         # deprecated since ROCm 4.2.0
         settings['define_macros'].append(('__HIP_PLATFORM_HCC__', '1'))
 
-    available_modules = []
-    if no_cuda:
-        available_modules = [m['name'] for m in MODULES]
-    else:
-        available_modules, settings = preconfigure_modules(
-            ctx, MODULES, compiler, settings)
-        required_modules = get_required_modules(MODULES)
-        if not (set(required_modules) <= set(available_modules)):
-            raise Exception('Your CUDA environment is invalid. '
-                            'Please check above error log.')
+    try:
+        host_compiler = compiler
+        if int(os.environ.get('CONDA_BUILD_CROSS_COMPILATION', 0)) == 1:
+            os.symlink(f'{os.environ["BUILD_PREFIX"]}/x86_64-conda-linux-gnu/bin/x86_64-conda-linux-gnu-ld',
+                       f'{os.environ["BUILD_PREFIX"]}/bin/ld')
+        if int(os.environ.get('CONDA_BUILD_CROSS_COMPILATION', 0)) == 1 or os.environ.get('CONDA_OVERRIDE_CUDA', '0').startswith('12'):
+            # If cross-compiling, we need build_and_run() & build_shlib() to use the compiler
+            # on the build platform to generate stub files that are executable in the build
+            # environment, not the target environment.a
+            logging.debug("creating a new compiler instance...")
+            compiler = ccompiler.new_compiler()
+            cc = os.environ['CC_FOR_BUILD'] if PLATFORM_LINUX else os.environ['CC']
+            cxx = os.environ['CXX_FOR_BUILD'] if PLATFORM_LINUX else os.environ['CXX']
+            compiler.compiler = [cc,]
+            compiler.compiler_cxx = [cxx,]
+            compiler.compiler_so = [cc,]
+            compiler.linker_exe = [cc, f'-B{os.environ["BUILD_PREFIX"]}/bin']
+            compiler.linker_so = [cc, f'-B{os.environ["BUILD_PREFIX"]}/bin', '-shared']
+
+        available_modules = []
+        if no_cuda:
+            available_modules = [m['name'] for m in MODULES]
+        else:
+            available_modules, settings = preconfigure_modules(
+                ctx, MODULES, compiler, settings)
+            required_modules = get_required_modules(MODULES)
+            if not (set(required_modules) <= set(available_modules)):
+                raise Exception('Your CUDA environment is invalid. '
+                                'Please check above error log.')
+    finally:
+        compiler = host_compiler
+        if os.environ.get('CONDA_BUILD_CROSS_COMPILATION'):
+            os.remove(f'{os.environ["BUILD_PREFIX"]}/bin/ld')
 
     ret = []
     for module in MODULES:
diff --git a/install/cupy_builder/install_build.py b/install/cupy_builder/install_build.py
index d0317e324..1b6ed8425 100644
--- a/install/cupy_builder/install_build.py
+++ b/install/cupy_builder/install_build.py
@@ -1,7 +1,9 @@
 # mypy: ignore-errors
 
 import contextlib
+import logging
 import os
+import platform
 import re
 import shlex
 import shutil
@@ -16,6 +18,9 @@ from cupy_builder import _environment
 from cupy_builder._context import Context
 
 
+if os.environ.get('CONDA_BUILD', '0') == '1':
+    logging.basicConfig(level=logging.DEBUG)
+
 PLATFORM_LINUX = sys.platform.startswith('linux')
 PLATFORM_WIN32 = sys.platform.startswith('win32')
 
@@ -186,6 +191,10 @@ def get_compiler_setting(ctx: Context, use_hip):
         cuda_cub_path = os.path.join(rocm_path, 'include', 'hipcub')
         if not os.path.exists(cuda_cub_path):
             cuda_cub_path = None
+    elif int(os.environ.get('CONDA_BUILD', 0) == 1 and PLATFORM_WIN32:
+        cuda_cub_path = os.path.join(os.environ['BUILD_PREFIX'], '/Library/include/targets/x64/cub')
+        if not os.path.exists(cuda_cub_path):
+            cuda_cub_path = None
     else:
         cuda_cub_path = None
     global _cub_path
@@ -689,9 +698,70 @@ def get_cusparselt_version(formatted=False):
     return _cusparselt_version
 
 
+def conda_get_target_name():
+    out = None
+    if PLATFORM_LINUX:
+        plat = platform.processor()
+        if plat == "aarch64":
+            out = "sbsa-linux"
+        else:
+            out = f"{plat}-linux"
+    elif PLATFORM_WIN32:
+        out = 'x64'
+    else:
+        assert False
+    logging.debug(f"{out=}")
+    return out
+
+
+def conda_update_dirs(include_dirs, library_dirs):
+    # Note: These hacks are needed for the dependency detection stage to function,
+    # because we create a fresh compiler instance that does not honor CFLAGS etc set
+    # in the conda-build environment.
+    include_dirs = list(include_dirs)
+    library_dirs = list(library_dirs)
+
+    if int(os.environ.get('CONDA_BUILD_CROSS_COMPILATION', 0)) == 1:
+        # If we're cross compiling, we need to generate stub files that are
+        # executable in the build environment, not the target environment.
+        # This assumes, however, that the build/host environments see the same
+        # CUDA Toolkit.
+        if os.environ.get('CONDA_OVERRIDE_CUDA', '0').startswith('12'):
+            include_dirs.insert(0, f'{os.environ["BUILD_PREFIX"]}/targets/x86_64-linux/include')
+            library_dirs.insert(0, f'{os.environ["BUILD_PREFIX"]}/targets/x86_64-linux/lib')
+            library_dirs.insert(0, f'{os.environ["BUILD_PREFIX"]}/lib/stubs')
+        elif os.environ.get('CONDA_OVERRIDE_CUDA', '0').startswith('11'):
+            include_dirs.append('/usr/local/cuda/include')
+            library_dirs.append('/usr/local/cuda/lib64/stubs')
+
+        # for optional dependencies
+        include_dirs.append(f'{os.environ["BUILD_PREFIX"]}/include')
+        library_dirs.append(f'{os.environ["BUILD_PREFIX"]}/lib')
+
+    if os.environ.get('CONDA_OVERRIDE_CUDA', '0').startswith('12'):
+        if PLATFORM_LINUX:
+            include_dirs.append(f'{os.environ["BUILD_PREFIX"]}/targets/{conda_get_target_name()}/include')  # for crt headers
+            library_dirs.append(f'{os.environ["PREFIX"]}/lib/stubs')
+            # for optional dependencies
+            include_dirs.append(f'{os.environ["PREFIX"]}/include')
+            library_dirs.append(f'{os.environ["PREFIX"]}/lib')
+        else:
+            include_dirs.append(f'{os.environ["BUILD_PREFIX"]}/Library/include/targets/{conda_get_target_name()}')  # for CCCL headers
+            include_dirs.append(f'{os.environ["LIBRARY_INC"]}/targets/{conda_get_target_name()}')  # for CCCL headers
+            # there seems to be no stubs for windows
+            # for optional dependencies
+            include_dirs.append(f'{os.environ["LIBRARY_INC"]}')  # seems to be $PREFIX/Library/include
+            library_dirs.append(f'{os.environ["LIBRARY_LIB"]}')  # seems to be $PREFIX/Library/lib
+
+    return include_dirs, library_dirs
+
+
 def build_shlib(compiler, source, libraries=(),
                 include_dirs=(), library_dirs=(), define_macros=None,
                 extra_compile_args=()):
+    include_dirs, library_dirs = conda_update_dirs(include_dirs, library_dirs)
+    logging.debug(include_dirs)
+
     with _tempdir() as temp_dir:
         fname = os.path.join(temp_dir, 'a.cpp')
         with open(fname, 'w') as f:
@@ -717,6 +787,9 @@ def build_shlib(compiler, source, libraries=(),
 def build_and_run(compiler, source, libraries=(),
                   include_dirs=(), library_dirs=(), define_macros=None,
                   extra_compile_args=()):
+    include_dirs, library_dirs = conda_update_dirs(include_dirs, library_dirs)
+    logging.debug(include_dirs)
+
     with _tempdir() as temp_dir:
         fname = os.path.join(temp_dir, 'a.cpp')
         with open(fname, 'w') as f:
